version: 2.1

display:
  source_url: https://github.com/Bruno-M44/Python-OC-Lettings-FR
  

orbs:
  python: circleci/python@0.3.2
  docker: circleci/docker@2.0.1

jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.9.5
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run pytest
          # This assumes pytest is installed via the install-package step above
          command: pytest
      - run:
          name: linting PEP8
          command: flake8
      - when:
          condition:
            equal: [ master , << pipeline.git.branch >> ]
          steps:
            - run: echo "Branche Master ==> On va conteneuriser et envoyer vers DockerHub"   

  deploy:
    machine: true
    steps:
      - checkout
      - run:
          name: Push Docker image to Heroku
          command: |
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:login
            HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:push -a $HEROKU_APP_NAME web
            HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:release -a $HEROKU_APP_NAME web
workflows:
  main:
    jobs:
      - build-and-test
      - docker/publish:
          name: containerize
          image: brunom44/oc-lettings
          tag: $CIRCLE_SHA1
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - containerize
          filters:
            branches:
              only: master